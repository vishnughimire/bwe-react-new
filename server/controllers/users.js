const User = require('../models/user');
const jwt = require ('jsonwebtoken');
const config = require('../config/dev');


// user login 
exports.login = (req, res) => {
  const {  email, password} = req.body;

  if (!password || !email) {
    return res
      .sendApiError(         // SEE API FUNCTION IN INDEX.JS UNDER MIDDLEWARE FOLDER
        {title: 'Missing Data',
       detail: 'Email or password is missing!'});
  }

  User.findOne({email}, (error, foundUser) => {
    if (error) {
      return res.mongoError(error); // return error from middlewares foder index.js  tht we catch from db
    }

    if (!foundUser) {
      return res
      .sendApiError(
        {title: 'Invalid Email',
        detail: "User with provided email doesn't exists"});
    }

    if (foundUser.hasSamePassword(password)) {
      // Generate JWT
        const token = jwt.sign({
          sub: foundUser.id,
          username: foundUser.username
        }, config.JWT_SECRET, { expiresIn: '2h'}) // see the secret cofigired in dev.js
        return res.json(token); // if user is verified , reponse will be provided with a secret token which can be store in cookies or storage 
        // after login to do any task this token will be used for every request made by client 

    } else {
      return res
        .sendApiError(
        { title: 'Invalid password',
        detail: 'Provided password is wrong!'});
    }
  })
}


// register new users

 exports.register = (req, res) => {
      const { username, email, password, passwordConfirmation } = req.body;

      if (!password || !email) {
        return res
        .sendApiError(
        {title: 'Missing Data',
         detail: 'Email or password is missing!'});
      }

      if (password !== passwordConfirmation) {
        return res
       .sendApiError(
        {title: 'Invalid password',
       detail: 'Password is not maching confirmation password!'});
      }

      User.findOne({email}, (error, existingUser) => {
        if (error) {
          return res.mongoError(error); // return error from middlewares foder index.js  tht we catch from db
        }

        if (existingUser) {
          return res
          .sendApiError(
           {title: 'Invalid Email',
          detail: 'User with provided email already exists!'});
        }

        const user = new User({username, email, password});
        user.save((error) => {
          if (error) {
            return res.mongoError(error); // return error from middlewares foder index.js  tht we catch from db
          }

          return res.json({status: 'registered'});
        })
      })
}

// IMP: token validation to authorize users  see more in index.js in MIDDLE ware app.get function
exports.onlyAuthUser = (req, res, next) => {
  const token = req.headers.authorization;

  if (token) {
    const decodedToken = parseToken(token);     // if token found, decode it , go to func parseToken below to decode 
    if (!decodedToken) { return notAuthorized(res); }

    User.findById(decodedToken.sub, (error, foundUser) => {  
      if(error) {
        return res.mongoError(error); // return error from middlewares foder index.js  tht we catch from db
      }

      if (foundUser) {                  //if user is found 
        res.locals.user = foundUser;    // create local users 
        next();
      } else {
        return notAuthorized(res);    
      }
    })
  } else {
    return notAuthorized(res);
  }
}

function parseToken(token) {
  // this functon verfiy the login user token, split (' space' ) 1 is used to removed word  bearer  in the starting of token  'bearer' from token, since token dosent contain bearer at first place generated by JWT, this also catch error of sending wrong token 
  try {
    return jwt.verify(token.split(' ')[1], config.JWT_SECRET);
  } catch(error) {
    return null;
  }
}

function notAuthorized(res) {
  return res
      .status(401)
      .send({errors: 
        [{title: 'Not Authorized!', detail: 'You need to log in to get an access!'}]})
}